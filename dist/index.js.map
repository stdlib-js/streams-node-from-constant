{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/debug.js", "../lib/main.js", "../lib/object_mode.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"sep\": \"\\n\",\n\t\"iter\": 1e308\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert-is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', opts.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-constant-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar isError = require( '@stdlib/assert-is-error' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isBuffer = require( '@stdlib/assert-is-buffer' );\nvar isUint8Array = require( '@stdlib/assert-is-uint8array' );\nvar arraybuffer2buffer = require( '@stdlib/buffer-from-arraybuffer' );\nvar string2buffer = require( '@stdlib/buffer-from-string' );\nvar Buffer = require( '@stdlib/buffer-ctor' ); // TODO: replace Buffer.concat usage with stdlib pkg\nvar assign = require( '@stdlib/object-assign' );\nvar format = require( '@stdlib/string-format' );\nvar inherit = require( '@stdlib/utils-inherit' );\nvar setNonEnumerable = require( '@stdlib/utils-define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nextTick = require( '@stdlib/utils-next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tdebug( 'Value: %s. Iter: %d.', this._value, this._i );\n\t\tif ( this._objectMode === false && this._i > 1 ) {\n\t\t\tFLG = this.push( Buffer.concat( [ this._sep, this._value ] ) );\n\t\t} else {\n\t\t\tFLG = this.push( this._value );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {ConstantStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream which always streams the same value.\n*\n* @constructor\n* @param {(string|Buffer|Uint8Array)} value - value to stream\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} in binary mode, value to stream must be a string, `Buffer`, or `Uint8Array`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ConstantStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams-node-inspect-sink' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new ConstantStream( 'beep', opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction ConstantStream( value, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof ConstantStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new ConstantStream( value, options );\n\t\t}\n\t\treturn new ConstantStream( value );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.objectMode === false ) {\n\t\tif ( isString( value ) ) {\n\t\t\tvalue = string2buffer( value );\n\t\t} else if ( isBuffer( value ) ) { // NOTE: order matters here. We want the `isBuffer` check BEFORE the `isUint8Array` check!!\n\t\t\t// Nothing to do, as value is already a buffer...\n\t\t} else if ( isUint8Array( value ) ) {\n\t\t\t// Convert to a `Buffer` object to provide backward compatibility with older Node.js versions...\n\t\t\tvalue = arraybuffer2buffer( value.buffer, value.byteOffset, value.length ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. In binary mode, a provided value must be a string, Buffer, or Uint8Array. Value: `%s`.', value ) );\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', string2buffer( opts.sep ) );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the value to stream:\n\tsetNonEnumerableReadOnly( this, '_value', value );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( ConstantStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof ConstantStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( ConstantStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof ConstantStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {ConstantStream} Stream instance\n*/\nsetNonEnumerableReadOnly( ConstantStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = ConstantStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar format = require( '@stdlib/string-format' );\nvar assign = require( '@stdlib/object-assign' );\nvar ConstantStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream which always streams the same value.\n*\n* @param {*} value - value to stream\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ConstantStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams-node-inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 3.14, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( value, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new ConstantStream( value, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar assign = require( '@stdlib/object-assign' );\nvar ConstantStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which always stream the same value.\n*\n* @param {(string|Buffer|Uint8Array|*)} [value] - value to stream\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( i.toString() ) );\n* }\n*/\nfunction factory( value, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\tvar FLG;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\topts = {};\n\t\tFLG = true;\n\t} else if ( nargs === 1 ) {\n\t\t// Check (imperfectly!) whether we were provided an \"options\" object...\n\t\tif (\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\t(\n\t\t\t\thasOwnProp( value, 'sep' ) ||\n\t\t\t\thasOwnProp( value, 'iter' ) ||\n\t\t\t\thasOwnProp( value, 'objectMode' ) ||\n\t\t\t\thasOwnProp( value, 'encoding' ) ||\n\t\t\t\thasOwnProp( value, 'highWaterMark' )\n\t\t\t)\n\t\t) {\n\t\t\topts = assign( {}, value );\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t} else { // nargs > 1\n\t\topts = assign( {}, options );\n\t}\n\tif ( FLG ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream which always streams the same value.\n\t*\n\t* @private\n\t* @param {(string|Buffer|Uint8Array|*)} value - value to stream\n\t* @throws {TypeError} in binary mode, value to stream must be a string, Buffer, or Uint8Array\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ConstantStream} Stream instance\n\t*/\n\tfunction createStream1( value ) {\n\t\treturn new ConstantStream( value, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream which always streams the same value.\n\t*\n\t* @private\n\t* @throws {TypeError} in binary mode, value to stream must be a string, Buffer, or Uint8Array\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ConstantStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new ConstantStream( value, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream which always streams the same value.\n*\n* @module @stdlib/streams-node-from-constant\n*\n* @example\n* var inspectStream = require( '@stdlib/streams-node-inspect-sink' );\n* var constantStream = require( '@stdlib/streams-node-from-constant' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = constantStream( 'beep', opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var constantStream = require( '@stdlib/streams-node-from-constant' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = constantStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( i.toString() ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams-node-inspect-sink' );\n* var constantStream = require( '@stdlib/streams-node-from-constant' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = constantStream.objectMode( 3.14, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isNonNegativeInteger", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_main", "__commonJSMin", "exports", "module", "Readable", "isError", "isString", "isBuffer", "isUint8Array", "arraybuffer2buffer", "string2buffer", "Buffer", "assign", "format", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "nextTick", "DEFAULTS", "validate", "debug", "read", "FLG", "destroy", "error", "self", "close", "ConstantStream", "value", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "format", "assign", "ConstantStream", "objectMode", "value", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "hasOwnProp", "assign", "ConstantStream", "factory", "value", "options", "nargs", "opts", "fcn", "FLG", "createStream1", "createStream2", "setReadOnly", "main", "objectMode", "factory"]
}
