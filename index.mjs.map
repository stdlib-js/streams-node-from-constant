{"version":3,"file":"index.mjs","sources":["../lib/debug.js","../lib/main.js","../lib/validate.js","../lib/object_mode.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-constant-stream' );\n\n\n// EXPORTS //\n\nexport default debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nimport isError from '@stdlib/assert-is-error';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isBuffer from '@stdlib/assert-is-buffer';\nimport isUint8Array from '@stdlib/assert-is-uint8array';\nimport arraybuffer2buffer from '@stdlib/buffer-from-arraybuffer';\nimport string2buffer from '@stdlib/buffer-from-string';\nimport Buffer from '@stdlib/buffer-ctor'; // TODO: replace Buffer.concat usage with stdlib pkg\nimport assign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport inherit from '@stdlib/utils-inherit';\nimport setNonEnumerable from '@stdlib/utils-define-nonenumerable-property';\nimport setNonEnumerableReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport nextTick from '@stdlib/utils-next-tick';\nimport DEFAULTS from './defaults.json';\nimport validate from './validate.js';\nimport debug from './debug.js';\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tthis._i += 1;\n\t\tif ( this._i > this._iter ) {\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tdebug( 'Value: %s. Iter: %d.', this._value, this._i );\n\t\tif ( this._objectMode === false && this._i > 1 ) {\n\t\t\tFLG = this.push( Buffer.concat( [ this._sep, this._value ] ) );\n\t\t} else {\n\t\t\tFLG = this.push( this._value );\n\t\t}\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {ConstantStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a stream which always streams the same value.\n*\n* @constructor\n* @param {(string|Buffer|Uint8Array)} value - value to stream\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} in binary mode, value to stream must be a string, `Buffer`, or `Uint8Array`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ConstantStream} Stream instance\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new ConstantStream( 'beep', opts );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction ConstantStream( value, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof ConstantStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new ConstantStream( value, options );\n\t\t}\n\t\treturn new ConstantStream( value );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.objectMode === false ) {\n\t\tif ( isString( value ) ) {\n\t\t\tvalue = string2buffer( value );\n\t\t} else if ( isBuffer( value ) ) { // NOTE: order matters here. We want the `isBuffer` check BEFORE the `isUint8Array` check!!\n\t\t\t// Nothing to do, as value is already a buffer...\n\t\t} else if ( isUint8Array( value ) ) {\n\t\t\t// Convert to a `Buffer` object to provide backward compatibility with older Node.js versions...\n\t\t\tvalue = arraybuffer2buffer( value.buffer, value.byteOffset, value.length ); // eslint-disable-line max-len\n\t\t} else {\n\t\t\tthrow new TypeError( format( '1MDAA', value ) );\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', string2buffer( opts.sep ) );\n\n\t// Cache the total number of iterations:\n\tsetNonEnumerableReadOnly( this, '_iter', opts.iter );\n\n\t// Cache the value to stream:\n\tsetNonEnumerableReadOnly( this, '_value', value );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( ConstantStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof ConstantStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( ConstantStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof ConstantStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {ConstantStream} Stream instance\n*/\nsetNonEnumerableReadOnly( ConstantStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nexport default ConstantStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isNonNegative } from '@stdlib/assert-is-nonnegative-number';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1MD2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( '1MD2W', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( '1MD2o', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( '1MD7n', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( '1MD4k', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\treturn new TypeError( format( '1MD2t', 'iter', opts.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport assign from '@stdlib/object-assign';\nimport ConstantStream from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream which always streams the same value.\n*\n* @param {*} value - value to stream\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing streaming\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ConstantStream} Stream instance\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( 3.14, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( value, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '1MD2V', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new ConstantStream( value, opts );\n}\n\n\n// EXPORTS //\n\nexport default objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport assign from '@stdlib/object-assign';\nimport ConstantStream from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams which always stream the same value.\n*\n* @param {(string|Buffer|Uint8Array|*)} [value] - value to stream\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing streaming\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( i.toString() ) );\n* }\n*/\nfunction factory( value, options ) {\n\tvar nargs;\n\tvar opts;\n\tvar fcn;\n\tvar FLG;\n\n\tnargs = arguments.length;\n\tif ( nargs === 0 ) {\n\t\topts = {};\n\t\tFLG = true;\n\t} else if ( nargs === 1 ) {\n\t\t// Check (imperfectly!) whether we were provided an \"options\" object...\n\t\tif (\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\t(\n\t\t\t\thasOwnProp( value, 'sep' ) ||\n\t\t\t\thasOwnProp( value, 'iter' ) ||\n\t\t\t\thasOwnProp( value, 'objectMode' ) ||\n\t\t\t\thasOwnProp( value, 'encoding' ) ||\n\t\t\t\thasOwnProp( value, 'highWaterMark' )\n\t\t\t)\n\t\t) {\n\t\t\topts = assign( {}, value );\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t} else { // nargs > 1\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '1MD2V', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t}\n\tif ( FLG ) {\n\t\tfcn = createStream1;\n\t} else {\n\t\tfcn = createStream2;\n\t}\n\treturn fcn;\n\n\t/**\n\t* Returns a readable stream which always streams the same value.\n\t*\n\t* @private\n\t* @param {(string|Buffer|Uint8Array|*)} value - value to stream\n\t* @throws {TypeError} in binary mode, value to stream must be a string, Buffer, or Uint8Array\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ConstantStream} Stream instance\n\t*/\n\tfunction createStream1( value ) {\n\t\treturn new ConstantStream( value, opts );\n\t}\n\n\t/**\n\t* Returns a readable stream which always streams the same value.\n\t*\n\t* @private\n\t* @throws {TypeError} in binary mode, value to stream must be a string, Buffer, or Uint8Array\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ConstantStream} Stream instance\n\t*/\n\tfunction createStream2() {\n\t\treturn new ConstantStream( value, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream which always streams the same value.\n*\n* @module @stdlib/streams-node-from-constant\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n* import constantStream from '@stdlib/streams-node-from-constant';\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = constantStream( 'beep', opts );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* import constantStream from '@stdlib/streams-node-from-constant';\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = constantStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( i.toString() ) );\n* }\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n* import constantStream from '@stdlib/streams-node-from-constant';\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = constantStream.objectMode( 3.14, opts );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport objectMode from './object_mode.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["debug","logger","Readable","require$$0","ConstantStream","value","options","opts","err","this","arguments","length","assign","DEFAULTS","isObject","hasOwnProp","sep","isString","TypeError","format","objectMode","isBoolean","encoding","highWaterMark","isNonNegative","iter","isNonNegativeInteger","validate","string2buffer","isBuffer","isUint8Array","arraybuffer2buffer","buffer","byteOffset","JSON","stringify","call","setNonEnumerable","setNonEnumerableReadOnly","factory","nargs","FLG","inherit","prototype","_destroyed","_i","_iter","push","_value","_objectMode","Buffer","concat","_sep","error","self","nextTick","isError","message","emit","setReadOnly","main"],"mappings":"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"}